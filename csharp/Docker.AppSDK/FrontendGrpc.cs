// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: frontend.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Docker.AppSDK {
  public static partial class AppFrontend
  {
    static readonly string __ServiceName = "Docker.AppSDK.AppFrontend";

    static readonly grpc::Marshaller<global::Docker.AppSDK.StringMessage> __Marshaller_StringMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Docker.AppSDK.StringMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Docker.AppSDK.ListAppResponse> __Marshaller_ListAppResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Docker.AppSDK.ListAppResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Docker.AppSDK.AppMeta> __Marshaller_AppMeta = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Docker.AppSDK.AppMeta.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Docker.AppSDK.RenderAppRequest> __Marshaller_RenderAppRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Docker.AppSDK.RenderAppRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Docker.AppSDK.App> __Marshaller_App = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Docker.AppSDK.App.Parser.ParseFrom);

    static readonly grpc::Method<global::Docker.AppSDK.StringMessage, global::Docker.AppSDK.ListAppResponse> __Method_ListApps = new grpc::Method<global::Docker.AppSDK.StringMessage, global::Docker.AppSDK.ListAppResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListApps",
        __Marshaller_StringMessage,
        __Marshaller_ListAppResponse);

    static readonly grpc::Method<global::Docker.AppSDK.StringMessage, global::Docker.AppSDK.AppMeta> __Method_GetApp = new grpc::Method<global::Docker.AppSDK.StringMessage, global::Docker.AppSDK.AppMeta>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApp",
        __Marshaller_StringMessage,
        __Marshaller_AppMeta);

    static readonly grpc::Method<global::Docker.AppSDK.StringMessage, global::Docker.AppSDK.StringMessage> __Method_GetAppSettingsTemplate = new grpc::Method<global::Docker.AppSDK.StringMessage, global::Docker.AppSDK.StringMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppSettingsTemplate",
        __Marshaller_StringMessage,
        __Marshaller_StringMessage);

    static readonly grpc::Method<global::Docker.AppSDK.RenderAppRequest, global::Docker.AppSDK.App> __Method_RenderApp = new grpc::Method<global::Docker.AppSDK.RenderAppRequest, global::Docker.AppSDK.App>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenderApp",
        __Marshaller_RenderAppRequest,
        __Marshaller_App);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Docker.AppSDK.FrontendReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AppFrontend</summary>
    public abstract partial class AppFrontendBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Docker.AppSDK.ListAppResponse> ListApps(global::Docker.AppSDK.StringMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Docker.AppSDK.AppMeta> GetApp(global::Docker.AppSDK.StringMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Docker.AppSDK.StringMessage> GetAppSettingsTemplate(global::Docker.AppSDK.StringMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Docker.AppSDK.App> RenderApp(global::Docker.AppSDK.RenderAppRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AppFrontend</summary>
    public partial class AppFrontendClient : grpc::ClientBase<AppFrontendClient>
    {
      /// <summary>Creates a new client for AppFrontend</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AppFrontendClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AppFrontend that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AppFrontendClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AppFrontendClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AppFrontendClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Docker.AppSDK.ListAppResponse ListApps(global::Docker.AppSDK.StringMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Docker.AppSDK.ListAppResponse ListApps(global::Docker.AppSDK.StringMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListApps, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.ListAppResponse> ListAppsAsync(global::Docker.AppSDK.StringMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAppsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.ListAppResponse> ListAppsAsync(global::Docker.AppSDK.StringMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListApps, null, options, request);
      }
      public virtual global::Docker.AppSDK.AppMeta GetApp(global::Docker.AppSDK.StringMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Docker.AppSDK.AppMeta GetApp(global::Docker.AppSDK.StringMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.AppMeta> GetAppAsync(global::Docker.AppSDK.StringMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.AppMeta> GetAppAsync(global::Docker.AppSDK.StringMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApp, null, options, request);
      }
      public virtual global::Docker.AppSDK.StringMessage GetAppSettingsTemplate(global::Docker.AppSDK.StringMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppSettingsTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Docker.AppSDK.StringMessage GetAppSettingsTemplate(global::Docker.AppSDK.StringMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppSettingsTemplate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.StringMessage> GetAppSettingsTemplateAsync(global::Docker.AppSDK.StringMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppSettingsTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.StringMessage> GetAppSettingsTemplateAsync(global::Docker.AppSDK.StringMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppSettingsTemplate, null, options, request);
      }
      public virtual global::Docker.AppSDK.App RenderApp(global::Docker.AppSDK.RenderAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenderApp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Docker.AppSDK.App RenderApp(global::Docker.AppSDK.RenderAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenderApp, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.App> RenderAppAsync(global::Docker.AppSDK.RenderAppRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenderAppAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Docker.AppSDK.App> RenderAppAsync(global::Docker.AppSDK.RenderAppRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenderApp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AppFrontendClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AppFrontendClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AppFrontendBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListApps, serviceImpl.ListApps)
          .AddMethod(__Method_GetApp, serviceImpl.GetApp)
          .AddMethod(__Method_GetAppSettingsTemplate, serviceImpl.GetAppSettingsTemplate)
          .AddMethod(__Method_RenderApp, serviceImpl.RenderApp).Build();
    }

  }
}
#endregion
