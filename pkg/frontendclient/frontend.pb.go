// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frontend.proto

/*
Package frontendclient is a generated protocol buffer package.

It is generated from these files:
	frontend.proto

It has these top-level messages:
	ExposedPort
	Service
	App
	AppMeta
	StringMessage
	ListAppResponse
	RenderAppRequest
*/
package frontendclient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ScalabilityModel int32

const (
	ScalabilityModel_Scalable  ScalabilityModel = 0
	ScalabilityModel_Singleton ScalabilityModel = 1
	ScalabilityModel_Global    ScalabilityModel = 2
)

var ScalabilityModel_name = map[int32]string{
	0: "Scalable",
	1: "Singleton",
	2: "Global",
}
var ScalabilityModel_value = map[string]int32{
	"Scalable":  0,
	"Singleton": 1,
	"Global":    2,
}

func (x ScalabilityModel) String() string {
	return proto.EnumName(ScalabilityModel_name, int32(x))
}
func (ScalabilityModel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PortKind int32

const (
	PortKind_Unspecified PortKind = 0
	PortKind_TCP         PortKind = 1
	PortKind_UDP         PortKind = 2
	PortKind_Both        PortKind = 3
)

var PortKind_name = map[int32]string{
	0: "Unspecified",
	1: "TCP",
	2: "UDP",
	3: "Both",
}
var PortKind_value = map[string]int32{
	"Unspecified": 0,
	"TCP":         1,
	"UDP":         2,
	"Both":        3,
}

func (x PortKind) String() string {
	return proto.EnumName(PortKind_name, int32(x))
}
func (PortKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExposedPort struct {
	ContainerPort int32    `protobuf:"varint,1,opt,name=ContainerPort" json:"ContainerPort,omitempty"`
	PublicPort    int32    `protobuf:"varint,2,opt,name=PublicPort" json:"PublicPort,omitempty"`
	Kind          PortKind `protobuf:"varint,3,opt,name=Kind,enum=Docker.AppSDK.PortKind" json:"Kind,omitempty"`
}

func (m *ExposedPort) Reset()                    { *m = ExposedPort{} }
func (m *ExposedPort) String() string            { return proto.CompactTextString(m) }
func (*ExposedPort) ProtoMessage()               {}
func (*ExposedPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExposedPort) GetContainerPort() int32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *ExposedPort) GetPublicPort() int32 {
	if m != nil {
		return m.PublicPort
	}
	return 0
}

func (m *ExposedPort) GetKind() PortKind {
	if m != nil {
		return m.Kind
	}
	return PortKind_Unspecified
}

type Service struct {
	Name             string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Image            string            `protobuf:"bytes,2,opt,name=Image" json:"Image,omitempty"`
	Command          []string          `protobuf:"bytes,3,rep,name=Command" json:"Command,omitempty"`
	Env              map[string]string `protobuf:"bytes,4,rep,name=Env" json:"Env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ScalabilityModel ScalabilityModel  `protobuf:"varint,5,opt,name=ScalabilityModel,enum=Docker.AppSDK.ScalabilityModel" json:"ScalabilityModel,omitempty"`
	Ports            []*ExposedPort    `protobuf:"bytes,6,rep,name=Ports" json:"Ports,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Service) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Service) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Service) GetScalabilityModel() ScalabilityModel {
	if m != nil {
		return m.ScalabilityModel
	}
	return ScalabilityModel_Scalable
}

func (m *Service) GetPorts() []*ExposedPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type App struct {
	Services []*Service `protobuf:"bytes,1,rep,name=Services" json:"Services,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *App) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type AppMeta struct {
	Names        []string            `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
	Version      string              `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
	Author       string              `protobuf:"bytes,3,opt,name=Author" json:"Author,omitempty"`
	Dependencies map[string]*AppMeta `protobuf:"bytes,4,rep,name=Dependencies" json:"Dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Description  string              `protobuf:"bytes,5,opt,name=Description" json:"Description,omitempty"`
}

func (m *AppMeta) Reset()                    { *m = AppMeta{} }
func (m *AppMeta) String() string            { return proto.CompactTextString(m) }
func (*AppMeta) ProtoMessage()               {}
func (*AppMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppMeta) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *AppMeta) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AppMeta) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *AppMeta) GetDependencies() map[string]*AppMeta {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *AppMeta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type StringMessage struct {
	Data string `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
}

func (m *StringMessage) Reset()                    { *m = StringMessage{} }
func (m *StringMessage) String() string            { return proto.CompactTextString(m) }
func (*StringMessage) ProtoMessage()               {}
func (*StringMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StringMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ListAppResponse struct {
	Apps []*AppMeta `protobuf:"bytes,1,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *ListAppResponse) Reset()                    { *m = ListAppResponse{} }
func (m *ListAppResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAppResponse) ProtoMessage()               {}
func (*ListAppResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListAppResponse) GetApps() []*AppMeta {
	if m != nil {
		return m.Apps
	}
	return nil
}

type RenderAppRequest struct {
	Name            string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	ParameterValues string `protobuf:"bytes,2,opt,name=ParameterValues" json:"ParameterValues,omitempty"`
}

func (m *RenderAppRequest) Reset()                    { *m = RenderAppRequest{} }
func (m *RenderAppRequest) String() string            { return proto.CompactTextString(m) }
func (*RenderAppRequest) ProtoMessage()               {}
func (*RenderAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RenderAppRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenderAppRequest) GetParameterValues() string {
	if m != nil {
		return m.ParameterValues
	}
	return ""
}

func init() {
	proto.RegisterType((*ExposedPort)(nil), "Docker.AppSDK.ExposedPort")
	proto.RegisterType((*Service)(nil), "Docker.AppSDK.Service")
	proto.RegisterType((*App)(nil), "Docker.AppSDK.App")
	proto.RegisterType((*AppMeta)(nil), "Docker.AppSDK.AppMeta")
	proto.RegisterType((*StringMessage)(nil), "Docker.AppSDK.StringMessage")
	proto.RegisterType((*ListAppResponse)(nil), "Docker.AppSDK.ListAppResponse")
	proto.RegisterType((*RenderAppRequest)(nil), "Docker.AppSDK.RenderAppRequest")
	proto.RegisterEnum("Docker.AppSDK.ScalabilityModel", ScalabilityModel_name, ScalabilityModel_value)
	proto.RegisterEnum("Docker.AppSDK.PortKind", PortKind_name, PortKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppFrontend service

type AppFrontendClient interface {
	ListApps(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*ListAppResponse, error)
	GetApp(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*AppMeta, error)
	GetAppSettingsTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
	RenderApp(ctx context.Context, in *RenderAppRequest, opts ...grpc.CallOption) (*App, error)
}

type appFrontendClient struct {
	cc *grpc.ClientConn
}

func NewAppFrontendClient(cc *grpc.ClientConn) AppFrontendClient {
	return &appFrontendClient{cc}
}

func (c *appFrontendClient) ListApps(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*ListAppResponse, error) {
	out := new(ListAppResponse)
	err := grpc.Invoke(ctx, "/Docker.AppSDK.AppFrontend/ListApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appFrontendClient) GetApp(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*AppMeta, error) {
	out := new(AppMeta)
	err := grpc.Invoke(ctx, "/Docker.AppSDK.AppFrontend/GetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appFrontendClient) GetAppSettingsTemplate(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := grpc.Invoke(ctx, "/Docker.AppSDK.AppFrontend/GetAppSettingsTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appFrontendClient) RenderApp(ctx context.Context, in *RenderAppRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/Docker.AppSDK.AppFrontend/RenderApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppFrontend service

type AppFrontendServer interface {
	ListApps(context.Context, *StringMessage) (*ListAppResponse, error)
	GetApp(context.Context, *StringMessage) (*AppMeta, error)
	GetAppSettingsTemplate(context.Context, *StringMessage) (*StringMessage, error)
	RenderApp(context.Context, *RenderAppRequest) (*App, error)
}

func RegisterAppFrontendServer(s *grpc.Server, srv AppFrontendServer) {
	s.RegisterService(&_AppFrontend_serviceDesc, srv)
}

func _AppFrontend_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppFrontendServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Docker.AppSDK.AppFrontend/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppFrontendServer).ListApps(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppFrontend_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppFrontendServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Docker.AppSDK.AppFrontend/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppFrontendServer).GetApp(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppFrontend_GetAppSettingsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppFrontendServer).GetAppSettingsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Docker.AppSDK.AppFrontend/GetAppSettingsTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppFrontendServer).GetAppSettingsTemplate(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppFrontend_RenderApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppFrontendServer).RenderApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Docker.AppSDK.AppFrontend/RenderApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppFrontendServer).RenderApp(ctx, req.(*RenderAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Docker.AppSDK.AppFrontend",
	HandlerType: (*AppFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApps",
			Handler:    _AppFrontend_ListApps_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _AppFrontend_GetApp_Handler,
		},
		{
			MethodName: "GetAppSettingsTemplate",
			Handler:    _AppFrontend_GetAppSettingsTemplate_Handler,
		},
		{
			MethodName: "RenderApp",
			Handler:    _AppFrontend_RenderApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

func init() { proto.RegisterFile("frontend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x5d, 0x6f, 0x1a, 0x3b,
	0x10, 0xcd, 0xb2, 0x7c, 0x0e, 0x21, 0xd9, 0x3b, 0xba, 0xca, 0x45, 0xe8, 0x2a, 0x17, 0x71, 0xfb,
	0x80, 0xd2, 0x0a, 0xb5, 0x54, 0xea, 0xa7, 0x5a, 0x95, 0x06, 0x9a, 0x56, 0x49, 0x2a, 0xb4, 0x24,
	0xe9, 0xf3, 0x02, 0x13, 0x62, 0x65, 0xb1, 0x5d, 0xdb, 0xa0, 0xe6, 0xad, 0xbf, 0xa3, 0x7f, 0xa2,
	0x8f, 0xfd, 0x7b, 0x95, 0xcd, 0x12, 0x91, 0x25, 0x69, 0xde, 0x3c, 0xb3, 0xc7, 0x73, 0xce, 0x9c,
	0x99, 0x35, 0x6c, 0x9d, 0x2b, 0xc1, 0x0d, 0xf1, 0x71, 0x4b, 0x2a, 0x61, 0x04, 0x56, 0xba, 0x62,
	0x74, 0x49, 0xaa, 0xd5, 0x91, 0x72, 0xd0, 0x3d, 0x6c, 0x7c, 0xf7, 0xa0, 0xdc, 0xfb, 0x26, 0x85,
	0xa6, 0x71, 0x5f, 0x28, 0x83, 0x0f, 0xa0, 0xb2, 0x2f, 0xb8, 0x89, 0x18, 0x27, 0x65, 0x13, 0x55,
	0xaf, 0xee, 0x35, 0x73, 0xe1, 0xcd, 0x24, 0xee, 0x02, 0xf4, 0x67, 0xc3, 0x98, 0x8d, 0x1c, 0x24,
	0xe3, 0x20, 0x2b, 0x19, 0x7c, 0x08, 0xd9, 0x43, 0xc6, 0xc7, 0x55, 0xbf, 0xee, 0x35, 0xb7, 0xda,
	0xff, 0xb4, 0x6e, 0x70, 0xb6, 0x2c, 0xc4, 0x7e, 0x0e, 0x1d, 0xa8, 0xf1, 0x2b, 0x03, 0x85, 0x01,
	0xa9, 0x39, 0x1b, 0x11, 0x22, 0x64, 0x3f, 0x47, 0x53, 0x72, 0xac, 0xa5, 0xd0, 0x9d, 0xf1, 0x6f,
	0xc8, 0x7d, 0x9a, 0x46, 0x13, 0x72, 0x3c, 0xa5, 0x70, 0x11, 0x60, 0x15, 0x0a, 0xfb, 0x62, 0x3a,
	0x8d, 0x1c, 0x8b, 0xdf, 0x2c, 0x85, 0xcb, 0x10, 0x9f, 0x80, 0xdf, 0xe3, 0xf3, 0x6a, 0xb6, 0xee,
	0x37, 0xcb, 0xed, 0xff, 0x52, 0xdc, 0x09, 0x51, 0xab, 0xc7, 0xe7, 0x3d, 0x6e, 0xd4, 0x55, 0x68,
	0xb1, 0x78, 0x08, 0xc1, 0x60, 0x14, 0xc5, 0xd1, 0x90, 0xc5, 0xcc, 0x5c, 0x1d, 0x8b, 0x31, 0xc5,
	0xd5, 0x9c, 0xd3, 0xbe, 0x76, 0x3f, 0x05, 0x0b, 0xd7, 0x2e, 0xe2, 0x63, 0xc8, 0xd9, 0x0e, 0x75,
	0x35, 0xef, 0x14, 0xd4, 0x52, 0x15, 0x56, 0xdc, 0x0e, 0x17, 0xc0, 0xda, 0x33, 0x28, 0x2e, 0xf5,
	0x60, 0x00, 0xfe, 0x25, 0x5d, 0x25, 0x06, 0xd8, 0xa3, 0xed, 0x7f, 0x1e, 0xc5, 0xb3, 0xeb, 0xfe,
	0x5d, 0xf0, 0x2a, 0xf3, 0xc2, 0x6b, 0xbc, 0x04, 0xbf, 0x23, 0x25, 0xb6, 0xa1, 0x98, 0xb4, 0xa5,
	0xab, 0x9e, 0xe3, 0xdc, 0xb9, 0xbd, 0xeb, 0xf0, 0x1a, 0xd7, 0xf8, 0x91, 0x81, 0x42, 0x47, 0xca,
	0x63, 0x32, 0x91, 0x25, 0xb0, 0x46, 0x2f, 0x2e, 0x97, 0xc2, 0x45, 0x60, 0x0d, 0x3e, 0x23, 0xa5,
	0x99, 0xe0, 0x09, 0xf1, 0x32, 0xc4, 0x1d, 0xc8, 0x77, 0x66, 0xe6, 0x42, 0x28, 0x37, 0xdf, 0x52,
	0x98, 0x44, 0x78, 0x04, 0x9b, 0x5d, 0x92, 0xc4, 0xc7, 0xc4, 0x47, 0x8c, 0x74, 0x32, 0x81, 0x66,
	0x4a, 0x4b, 0xc2, 0xda, 0x5a, 0x85, 0x2e, 0x46, 0x71, 0xe3, 0x36, 0xd6, 0xa1, 0xdc, 0x25, 0x3d,
	0x52, 0x4c, 0x1a, 0xab, 0x21, 0xe7, 0xa8, 0x56, 0x53, 0xb5, 0x2f, 0xf0, 0xd7, 0x5a, 0x91, 0x5b,
	0xfc, 0x7b, 0xb4, 0xea, 0xdf, 0xba, 0x37, 0x89, 0x9e, 0x55, 0x5f, 0xff, 0x87, 0xca, 0xc0, 0x28,
	0xc6, 0x27, 0xc7, 0xa4, 0xb5, 0x5d, 0x36, 0x84, 0x6c, 0x37, 0x32, 0xd1, 0x72, 0x2d, 0xed, 0xb9,
	0xf1, 0x06, 0xb6, 0x8f, 0x98, 0x36, 0x1d, 0x29, 0x43, 0xd2, 0x52, 0x70, 0x4d, 0xb8, 0x07, 0xd9,
	0x8e, 0x94, 0x77, 0x0d, 0x61, 0x49, 0xe4, 0x30, 0x8d, 0x3e, 0x04, 0xa1, 0x95, 0xae, 0x5c, 0x81,
	0xaf, 0x33, 0xd2, 0xe6, 0xd6, 0xed, 0x6f, 0xc2, 0x76, 0x3f, 0x52, 0xd1, 0x94, 0x0c, 0xa9, 0x33,
	0xab, 0x50, 0x27, 0xe3, 0x48, 0xa7, 0xf7, 0x5e, 0xaf, 0x2f, 0x31, 0x6e, 0x42, 0x71, 0x91, 0x8b,
	0x29, 0xd8, 0xc0, 0x0a, 0x94, 0x06, 0x8c, 0x4f, 0x62, 0x32, 0x82, 0x07, 0x1e, 0x02, 0xe4, 0x0f,
	0x62, 0x31, 0x8c, 0xe2, 0x20, 0xb3, 0xf7, 0x1c, 0x8a, 0xcb, 0xdf, 0x12, 0xb7, 0xa1, 0x7c, 0xca,
	0xb5, 0xa4, 0x11, 0x3b, 0x67, 0x34, 0x0e, 0x36, 0xb0, 0x00, 0xfe, 0xc9, 0x7e, 0x3f, 0xf0, 0xec,
	0xe1, 0xb4, 0xdb, 0x0f, 0x32, 0x58, 0x84, 0xec, 0x7b, 0x61, 0x2e, 0x02, 0xbf, 0xfd, 0x33, 0x03,
	0xe5, 0x8e, 0x94, 0x1f, 0x92, 0x57, 0x06, 0x3f, 0x42, 0x31, 0xb1, 0x45, 0xe3, 0xbf, 0xe9, 0x35,
	0x5c, 0x35, 0xb5, 0xb6, 0x9b, 0xfa, 0x9a, 0x76, 0xf3, 0x2d, 0xe4, 0x0f, 0xc8, 0x66, 0xee, 0xa9,
	0x73, 0x87, 0xcf, 0x78, 0x02, 0x3b, 0x8b, 0xfb, 0x03, 0x32, 0x86, 0xf1, 0x89, 0x3e, 0xa1, 0xa9,
	0x8c, 0x23, 0x43, 0xf7, 0xd4, 0xfb, 0xe3, 0x57, 0x7c, 0x07, 0xa5, 0xeb, 0xb9, 0x61, 0xfa, 0x75,
	0x48, 0x4f, 0xb4, 0x86, 0xeb, 0xda, 0x86, 0x79, 0xf7, 0x10, 0x3f, 0xfd, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x98, 0x80, 0x18, 0xb5, 0x9a, 0x05, 0x00, 0x00,
}
